// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lots.Data.Migrations
{
    [DbContext(typeof(LotsDbContext))]
    [Migration("20251025090253_AddUser")]
    partial class AddUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lots.Data.Entities.Bidding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AnnouncedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("BankruptMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("BidAcceptancePeriod")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ViewingProcedure")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Biddings");
                });

            modelBuilder.Entity("Lots.Data.Entities.Lot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BiddingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Deposit")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsSharedOwnership")
                        .HasColumnType("boolean");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("LotNumber")
                        .HasColumnType("text");

                    b.Property<decimal?>("StartPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Step")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("ViewingProcedure")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BiddingId");

                    b.ToTable("Lots");
                });

            modelBuilder.Entity("Lots.Data.Entities.LotCadastralNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CadastralNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LotId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LotId");

                    b.ToTable("LotCadastralNumbers");
                });

            modelBuilder.Entity("Lots.Data.Entities.LotCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("LotId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LotId");

                    b.ToTable("LotCategories");
                });

            modelBuilder.Entity("Lots.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSubscriptionActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubscriptionEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Lots.Data.Entities.Lot", b =>
                {
                    b.HasOne("Lots.Data.Entities.Bidding", "Bidding")
                        .WithMany("Lots")
                        .HasForeignKey("BiddingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bidding");
                });

            modelBuilder.Entity("Lots.Data.Entities.LotCadastralNumber", b =>
                {
                    b.HasOne("Lots.Data.Entities.Lot", "Lot")
                        .WithMany("CadastralNumbers")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("Lots.Data.Entities.LotCategory", b =>
                {
                    b.HasOne("Lots.Data.Entities.Lot", "Lot")
                        .WithMany("Categories")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("Lots.Data.Entities.Bidding", b =>
                {
                    b.Navigation("Lots");
                });

            modelBuilder.Entity("Lots.Data.Entities.Lot", b =>
                {
                    b.Navigation("CadastralNumbers");

                    b.Navigation("Categories");
                });
#pragma warning restore 612, 618
        }
    }
}
